;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

((cell, cell)) $StateInit$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'code, cell vvv'data) = __tact_tuple_destroy_2(v);
    return (vvv'code, vvv'data);
}

;;
;; Type: Context
;; TLB: _ bounced:bool sender:address value:int257 raw:^slice = Context
;;

_ $Context$_get_value((int, slice, int, slice) v) inline {
    var (v'bounced, v'sender, v'value, v'raw) = v;
    return v'value;
}

;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_code_data_body(slice to, int value, int mode, cell code, cell data, cell body) inline {
    return (true, to, value, mode, body, code, data);
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline {
    return (bounce, to, value, mode, body, code, data);
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_body(slice to, int value, int mode, cell body) inline {
    return (true, to, value, mode, body, null(), null());
}

;;
;; Type: Deploy
;; Header: 0x946a98b6
;; TLB: deploy#946a98b6 queryId:uint64 = Deploy
;;

(slice, ((int))) $Deploy$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2490013878);
    var v'queryId = sc_0~load_uint(64);
    return (sc_0, (v'queryId));
}

;;
;; Type: DeployOk
;; Header: 0xaff90f57
;; TLB: deploy_ok#aff90f57 queryId:uint64 = DeployOk
;;

builder $DeployOk$_store(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 2952335191, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell $DeployOk$_store_cell((int) v) inline {
    return $DeployOk$_store(begin_cell(), v).end_cell();
}

((int)) $DeployOk$_constructor_queryId(int queryId) inline {
    return (queryId);
}

;;
;; Type: MarketInitialize
;; Header: 0x8dadf0f6
;; TLB: market_initialize#8dadf0f6 owner:address eventDescription:^string endTime:uint64 outcomeName1:^string outcomeName2:^string numOutcomes:uint8 = MarketInitialize
;;

(slice, ((slice, slice, int, slice, slice, int))) $MarketInitialize$_load(slice sc_0) inline_ref {
    throw_unless(129, sc_0~load_uint(32) == 2376986870);
    var v'owner = sc_0~__tact_load_address();
    var v'eventDescription = sc_0~load_ref().begin_parse();
    var v'endTime = sc_0~load_uint(64);
    var v'outcomeName1 = sc_0~load_ref().begin_parse();
    var v'outcomeName2 = sc_0~load_ref().begin_parse();
    var v'numOutcomes = sc_0~load_uint(8);
    return (sc_0, (v'owner, v'eventDescription, v'endTime, v'outcomeName1, v'outcomeName2, v'numOutcomes));
}

;;
;; Type: PlaceBet
;; Header: 0xb863dd1f
;; TLB: place_bet#b863dd1f outcome:int8 = PlaceBet
;;

(slice, ((int))) $PlaceBet$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 3093552415);
    var v'outcome = sc_0~load_int(8);
    return (sc_0, (v'outcome));
}

;;
;; Type: ResolveMarket
;; Header: 0x46e6f3c8
;; TLB: resolve_market#46e6f3c8 outcome:int8 = ResolveMarket
;;

(slice, ((int))) $ResolveMarket$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 1189540808);
    var v'outcome = sc_0~load_int(8);
    return (sc_0, (v'outcome));
}

;;
;; Type: ClaimWinningsInfo
;; Header: 0x40c64062
;; TLB: claim_winnings_info#40c64062 betAmount:uint64 userBet:address outcome:int8 = ClaimWinningsInfo
;;

(slice, ((int, slice, int))) $ClaimWinningsInfo$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 1086734434);
    var v'betAmount = sc_0~load_uint(64);
    var v'userBet = sc_0~__tact_load_address();
    var v'outcome = sc_0~load_int(8);
    return (sc_0, (v'betAmount, v'userBet, v'outcome));
}

;;
;; Type: PredictionMarketDetails
;; Header: 0x820ef6a8
;; TLB: prediction_market_details#820ef6a8 owner:address eventDescription:^string endTime:uint64 outcomeName1:^string outcomeName2:^string numOutcomes:uint8 totalOutcomeBets:dict<uint8, uint64> totalPool:uint64 outcome:int8 resolved:bool = PredictionMarketDetails
;;

(slice, slice, int, slice, slice, int, cell, int, int, int) $PredictionMarketDetails$_to_external(((slice, slice, int, slice, slice, int, cell, int, int, int)) v) inline {
    var (v'owner, v'eventDescription, v'endTime, v'outcomeName1, v'outcomeName2, v'numOutcomes, v'totalOutcomeBets, v'totalPool, v'outcome, v'resolved) = v; 
    return (v'owner, v'eventDescription, v'endTime, v'outcomeName1, v'outcomeName2, v'numOutcomes, v'totalOutcomeBets, v'totalPool, v'outcome, v'resolved);
}

((slice, slice, int, slice, slice, int, cell, int, int, int)) $PredictionMarketDetails$_constructor_owner_eventDescription_endTime_outcomeName1_outcomeName2_numOutcomes_totalOutcomeBets_totalPool_resolved_outcome(slice owner, slice eventDescription, int endTime, slice outcomeName1, slice outcomeName2, int numOutcomes, cell totalOutcomeBets, int totalPool, int resolved, int outcome) inline {
    return (owner, eventDescription, endTime, outcomeName1, outcomeName2, numOutcomes, totalOutcomeBets, totalPool, outcome, resolved);
}

;;
;; Type: PlaceBetInternal
;; Header: 0xd0532bab
;; TLB: place_bet_internal#d0532bab outcome:int8 = PlaceBetInternal
;;

builder $PlaceBetInternal$_store(builder build_0, (int) v) inline {
    var (v'outcome) = v;
    build_0 = store_uint(build_0, 3495111595, 32);
    build_0 = build_0.store_int(v'outcome, 8);
    return build_0;
}

cell $PlaceBetInternal$_store_cell((int) v) inline {
    return $PlaceBetInternal$_store(begin_cell(), v).end_cell();
}

((int)) $PlaceBetInternal$_constructor_outcome(int outcome) inline {
    return (outcome);
}

;;
;; Type: PredictionMarket
;;

builder $PredictionMarket$_store(builder build_0, (slice, slice, int, slice, int, int, int, slice, slice, int, cell, int) v) inline {
    var (v'owner, v'parent, v'seqno, v'eventDescription, v'endTime, v'resolved, v'outcome, v'outcomeName1, v'outcomeName2, v'numOutcomes, v'totalOutcomeBets, v'totalPool) = v;
    build_0 = __tact_store_address(build_0, v'owner);
    build_0 = __tact_store_address(build_0, v'parent);
    build_0 = build_0.store_uint(v'seqno, 64);
    build_0 = build_0.store_ref(begin_cell().store_slice(v'eventDescription).end_cell());
    build_0 = build_0.store_uint(v'endTime, 64);
    build_0 = build_0.store_int(v'resolved, 1);
    build_0 = build_0.store_int(v'outcome, 8);
    build_0 = build_0.store_ref(begin_cell().store_slice(v'outcomeName1).end_cell());
    var build_1 = begin_cell();
    build_1 = build_1.store_ref(begin_cell().store_slice(v'outcomeName2).end_cell());
    build_1 = build_1.store_uint(v'numOutcomes, 8);
    build_1 = build_1.store_dict(v'totalOutcomeBets);
    build_1 = build_1.store_uint(v'totalPool, 64);
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

(slice, ((slice, slice, int, slice, int, int, int, slice, slice, int, cell, int))) $PredictionMarket$_load(slice sc_0) inline {
    var v'owner = sc_0~__tact_load_address();
    var v'parent = sc_0~__tact_load_address();
    var v'seqno = sc_0~load_uint(64);
    var v'eventDescription = sc_0~load_ref().begin_parse();
    var v'endTime = sc_0~load_uint(64);
    var v'resolved = sc_0~load_int(1);
    var v'outcome = sc_0~load_int(8);
    var v'outcomeName1 = sc_0~load_ref().begin_parse();
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'outcomeName2 = sc_1~load_ref().begin_parse();
    var v'numOutcomes = sc_1~load_uint(8);
    var v'totalOutcomeBets = sc_1~load_dict();
    var v'totalPool = sc_1~load_uint(64);
    return (sc_0, (v'owner, v'parent, v'seqno, v'eventDescription, v'endTime, v'resolved, v'outcome, v'outcomeName1, v'outcomeName2, v'numOutcomes, v'totalOutcomeBets, v'totalPool));
}

(slice, ((slice, int))) $PredictionMarket$init$_load(slice sc_0) inline {
    var v'parent = sc_0~__tact_load_address();
    var v'seqno = sc_0~load_int(257);
    return (sc_0, (v'parent, v'seqno));
}

(slice, slice, int, slice, int, int, int, slice, slice, int, cell, int) $PredictionMarket$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$PredictionMarket$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        (slice parent, int seqno) = $sc~$PredictionMarket$init$_load();
        $sc.end_parse();
        return $PredictionMarket$_contract_init(parent, seqno);
    }
}

() $PredictionMarket$_contract_store((slice, slice, int, slice, int, int, int, slice, slice, int, cell, int) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $PredictionMarket$_store(b, v);
    set_data(b.end_cell());
}

;;
;; Type: UserBet
;;

builder $UserBet$init$_store(builder build_0, (slice, slice) v) inline {
    var (v'owner, v'parent) = v;
    build_0 = __tact_store_address(build_0, v'owner);
    build_0 = __tact_store_address(build_0, v'parent);
    return build_0;
}

(cell, cell) $UserBet$_init_child(cell sys', slice $owner, slice $parent) inline_ref {
    slice sc' = sys'.begin_parse();
    cell source = sc'~load_dict();
    cell contracts = new_dict();
    
    ;; Contract Code: UserBet
    cell mine = __tact_dict_get_code(source, 13531);
    contracts = __tact_dict_set_code(contracts, 13531, mine);
    
    ;; Build cell
    builder b = begin_cell();
    b = b.store_ref(begin_cell().store_dict(contracts).end_cell());
    b = b.store_int(false, 1);
    b = $UserBet$init$_store(b, ($owner, $parent));
    return (mine, b.end_cell());
}