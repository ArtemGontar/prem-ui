;;
;; Header files for UserBet
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) inline;

;; __tact_load_address
(slice, slice) __tact_load_address(slice cs) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_my_balance
int __tact_my_balance() inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; __tact_slice_eq_bits
int __tact_slice_eq_bits(slice a, slice b) inline;

;; $Deploy$_load
(slice, ((int))) $Deploy$_load(slice sc_0) inline;

;; $DeployOk$_store
builder $DeployOk$_store(builder build_0, (int) v) inline;

;; $DeployOk$_store_cell
cell $DeployOk$_store_cell((int) v) inline;

;; $ClaimWinningsInfo$_store
builder $ClaimWinningsInfo$_store(builder build_0, (int, slice, int) v) inline;

;; $ClaimWinningsInfo$_store_cell
cell $ClaimWinningsInfo$_store_cell((int, slice, int) v) inline;

;; $PlaceBetInternal$_load
(slice, ((int, int))) $PlaceBetInternal$_load(slice sc_0) inline;

;; $UserBet$_store
builder $UserBet$_store(builder build_0, (slice, slice, int, int, int) v) inline;

;; $UserBet$_load
(slice, ((slice, slice, int, int, int))) $UserBet$_load(slice sc_0) inline;

;; $StateInit$_not_null
((cell, cell)) $StateInit$_not_null(tuple v) inline;

;; $Context$_get_value
_ $Context$_get_value((int, slice, int, slice) v) inline;

;; $UserBetInfo$_to_external
(int, int) $UserBetInfo$_to_external(((int, int)) v) inline;

;; $UserBet$init$_load
(slice, ((slice, slice))) $UserBet$init$_load(slice sc_0) inline;

;; $UserBet$_contract_init
(slice, slice, int, int, int) $UserBet$_contract_init(slice $owner, slice $parent) impure inline_ref;

;; $UserBet$_contract_load
(slice, slice, int, int, int) $UserBet$_contract_load() impure inline_ref;

;; $UserBet$_contract_store
() $UserBet$_contract_store((slice, slice, int, int, int) v) impure inline;

;; $global_send
() $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;

;; $SendParameters$_constructor_bounce_to_value_mode_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline;

;; $UserBetInfo$_constructor_betAmount_outcome
((int, int)) $UserBetInfo$_constructor_betAmount_outcome(int betAmount, int outcome) inline;

;; $UserBet$_fun_userBet
((slice, slice, int, int, int), (int, int)) $UserBet$_fun_userBet((slice, slice, int, int, int) $self) impure inline_ref;

;; $UserBet$_fun_forward
((slice, slice, int, int, int), ()) $UserBet$_fun_forward((slice, slice, int, int, int) $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref;

;; $UserBet$_fun_notify
((slice, slice, int, int, int), ()) $UserBet$_fun_notify((slice, slice, int, int, int) $self, cell $body) impure inline;

;; $SendParameters$_constructor_to_value_mode_body
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_body(slice to, int value, int mode, cell body) inline;

;; $ClaimWinningsInfo$_constructor_outcome_betAmount_walletAddress
((int, slice, int)) $ClaimWinningsInfo$_constructor_outcome_betAmount_walletAddress(int outcome, int betAmount, slice walletAddress) inline;

;; $DeployOk$_constructor_queryId
((int)) $DeployOk$_constructor_queryId(int queryId) inline;
