#pragma version =0.4.4;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "tact_UserBet.headers.fc";
#include "tact_UserBet.stdlib.fc";
#include "tact_UserBet.constants.fc";
#include "tact_UserBet.storage.fc";

;;
;; Contract UserBet functions
;;

(slice, slice, int, int, int) $UserBet$_contract_init(slice $owner, slice $parent) impure inline_ref {
    var (($self'owner, $self'parent, $self'betAmount, $self'outcome, $self'isClaimed)) = (null(), null(), null(), null(), null());
    $self'owner = $owner;
    $self'parent = $parent;
    $self'betAmount = 0;
    $self'outcome = (- 1);
    $self'isClaimed = false;
    return ($self'owner, $self'parent, $self'betAmount, $self'outcome, $self'isClaimed);
}

((slice, slice, int, int, int), (int, int)) $UserBet$_fun_userBet((slice, slice, int, int, int) $self) impure inline_ref {
    var (($self'owner, $self'parent, $self'betAmount, $self'outcome, $self'isClaimed)) = $self;
    return (($self'owner, $self'parent, $self'betAmount, $self'outcome, $self'isClaimed), $UserBetInfo$_constructor_betAmount_outcome($self'betAmount, $self'outcome));
}

;;
;; Receivers of a Contract UserBet
;;

(((slice, slice, int, int, int)), ()) $UserBet$_internal_binary_PlaceBetInternal((slice, slice, int, int, int) $self, (int, int) $msg) impure inline {
    var ($self'owner, $self'parent, $self'betAmount, $self'outcome, $self'isClaimed) = $self;
    var ($msg'outcome, $msg'betAmount) = $msg;
    throw_unless(53624, ($self'outcome == (- 1)));
    $self'outcome = $msg'outcome;
    $self'betAmount = $msg'betAmount;
    $global_send($SendParameters$_constructor_to_value_mode_body($self'owner, ($Context$_get_value(__tact_context_get()) - 10000000), 2, __gen_cell_comment_b0ff00cda639475b5e711360e99508a2790d5ee34d0598e7d8066850f3ac6c11()));
    return (($self'owner, $self'parent, $self'betAmount, $self'outcome, $self'isClaimed), ());
}

((slice, slice, int, int, int), ()) $UserBet$_internal_text_f3e14e9ae41d309dc268d1525fc448aec647131927692d763d133b025a46db01((slice, slice, int, int, int) $self) impure inline {
    var ($self'owner, $self'parent, $self'betAmount, $self'outcome, $self'isClaimed) = $self;
    $global_send($SendParameters$_constructor_to_value_mode_body($self'parent, 60000000, 2, $ClaimWinningsInfo$_store_cell($ClaimWinningsInfo$_constructor_outcome_betAmount_walletAddress($self'outcome, $self'betAmount, __tact_context_get_sender()))));
    return (($self'owner, $self'parent, $self'betAmount, $self'outcome, $self'isClaimed), ());
}

((slice, slice, int, int, int), ()) $UserBet$_internal_text_228c29575099cca128304cdf5d00b4fd7f72c972ed919e669959f65c46c034c5((slice, slice, int, int, int) $self) impure inline {
    var ($self'owner, $self'parent, $self'betAmount, $self'outcome, $self'isClaimed) = $self;
    $self'isClaimed = true;
    $global_send($SendParameters$_constructor_to_value_mode_body($self'owner, 1000000, 2, __gen_cell_comment_dc3254938063499a385b056241eb24e38c8d52e6c5083310e0c3645ad8d02371()));
    return (($self'owner, $self'parent, $self'betAmount, $self'outcome, $self'isClaimed), ());
}

((slice, slice, int, int, int), ()) $UserBet$_receive_bounce((slice, slice, int, int, int) $self, slice $src) impure inline {
    var ($self'owner, $self'parent, $self'betAmount, $self'outcome, $self'isClaimed) = $self;
    return (($self'owner, $self'parent, $self'betAmount, $self'outcome, $self'isClaimed), ());
}

(((slice, slice, int, int, int)), ()) $UserBet$_internal_binary_Deploy((slice, slice, int, int, int) $self, (int) $deploy) impure inline {
    var ($self'owner, $self'parent, $self'betAmount, $self'outcome, $self'isClaimed) = $self;
    var ($deploy'queryId) = $deploy;
    ($self'owner, $self'parent, $self'betAmount, $self'outcome, $self'isClaimed)~$UserBet$_fun_notify($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId)));
    return (($self'owner, $self'parent, $self'betAmount, $self'outcome, $self'isClaimed), ());
}

;;
;; Get methods of a Contract UserBet
;;

_ %userBet() method_id(88621) {
    var self = $UserBet$_contract_load();
    var res = self~$UserBet$_fun_userBet();
    return $UserBetInfo$_to_external(res);
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmRBkfkSsjMTG6hag7T7BkHaZYe7mpkwJwZNr82ZWZttHA";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract UserBet
;;

((slice, slice, int, int, int), int) $UserBet$_contract_router_internal((slice, slice, int, int, int) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        
        ;; Skip 0xFFFFFFFF
        in_msg~skip_bits(32);
        
        ;; Fallback bounce receiver
        self~$UserBet$_receive_bounce(in_msg);
        
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive PlaceBetInternal message
    if (op == 4125778717) {
        var msg = in_msg~$PlaceBetInternal$_load();
        self~$UserBet$_internal_binary_PlaceBetInternal(msg);
        return (self, true);
    }
    
    ;; Receive Deploy message
    if (op == 2490013878) {
        var msg = in_msg~$Deploy$_load();
        self~$UserBet$_internal_binary_Deploy(msg);
        return (self, true);
    }
    
    ;; Text Receivers
    if (op == 0) {
        var text_op = slice_hash(in_msg);
        
        ;; Receive "claimWinnings" message
        if (text_op == 0xf3e14e9ae41d309dc268d1525fc448aec647131927692d763d133b025a46db01) {
            self~$UserBet$_internal_text_f3e14e9ae41d309dc268d1525fc448aec647131927692d763d133b025a46db01();
            return (self, true);
        }
        
        ;; Receive "claimWinningsInternal" message
        if (text_op == 0x228c29575099cca128304cdf5d00b4fd7f72c972ed919e669959f65c46c034c5) {
            self~$UserBet$_internal_text_228c29575099cca128304cdf5d00b4fd7f72c972ed919e669959f65c46c034c5();
            return (self, true);
        }
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $UserBet$_contract_load();
    
    ;; Handle operation
    int handled = self~$UserBet$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $UserBet$_contract_store(self);
}
