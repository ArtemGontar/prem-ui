;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

((cell, cell)) $StateInit$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'code, cell vvv'data) = __tact_tuple_destroy_2(v);
    return (vvv'code, vvv'data);
}

;;
;; Type: Context
;; TLB: _ bounced:bool sender:address value:int257 raw:^slice = Context
;;

_ $Context$_get_value((int, slice, int, slice) v) inline {
    var (v'bounced, v'sender, v'value, v'raw) = v;
    return v'value;
}

;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline {
    return (bounce, to, value, mode, body, code, data);
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_body(slice to, int value, int mode, cell body) inline {
    return (true, to, value, mode, body, null(), null());
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode(slice to, int value, int mode) inline {
    return (true, to, value, mode, null(), null(), null());
}

;;
;; Type: Deploy
;; Header: 0x946a98b6
;; TLB: deploy#946a98b6 queryId:uint64 = Deploy
;;

(slice, ((int))) $Deploy$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2490013878);
    var v'queryId = sc_0~load_uint(64);
    return (sc_0, (v'queryId));
}

;;
;; Type: DeployOk
;; Header: 0xaff90f57
;; TLB: deploy_ok#aff90f57 queryId:uint64 = DeployOk
;;

builder $DeployOk$_store(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 2952335191, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell $DeployOk$_store_cell((int) v) inline {
    return $DeployOk$_store(begin_cell(), v).end_cell();
}

((int)) $DeployOk$_constructor_queryId(int queryId) inline {
    return (queryId);
}

;;
;; Type: ClaimWinningsInfo
;; Header: 0x40c64062
;; TLB: claim_winnings_info#40c64062 betAmount:uint64 userBet:address outcome:int8 = ClaimWinningsInfo
;;

builder $ClaimWinningsInfo$_store(builder build_0, (int, slice, int) v) inline {
    var (v'betAmount, v'userBet, v'outcome) = v;
    build_0 = store_uint(build_0, 1086734434, 32);
    build_0 = build_0.store_uint(v'betAmount, 64);
    build_0 = __tact_store_address(build_0, v'userBet);
    build_0 = build_0.store_int(v'outcome, 8);
    return build_0;
}

cell $ClaimWinningsInfo$_store_cell((int, slice, int) v) inline {
    return $ClaimWinningsInfo$_store(begin_cell(), v).end_cell();
}

((int, slice, int)) $ClaimWinningsInfo$_constructor_outcome_betAmount_userBet(int outcome, int betAmount, slice userBet) inline {
    return (betAmount, userBet, outcome);
}

;;
;; Type: PlaceBetInternal
;; Header: 0xf5ea631d
;; TLB: place_bet_internal#f5ea631d outcome:int8 betAmount:uint64 = PlaceBetInternal
;;

(slice, ((int, int))) $PlaceBetInternal$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 4125778717);
    var v'outcome = sc_0~load_int(8);
    var v'betAmount = sc_0~load_uint(64);
    return (sc_0, (v'outcome, v'betAmount));
}

;;
;; Type: UserBetInfo
;; Header: 0xf7b3403f
;; TLB: user_bet_info#f7b3403f outcome:int8 betAmount:uint64 = UserBetInfo
;;

(int, int) $UserBetInfo$_to_external(((int, int)) v) inline {
    var (v'outcome, v'betAmount) = v; 
    return (v'outcome, v'betAmount);
}

((int, int)) $UserBetInfo$_constructor_betAmount_outcome(int betAmount, int outcome) inline {
    return (outcome, betAmount);
}

;;
;; Type: UserBet
;;

builder $UserBet$_store(builder build_0, (slice, slice, int, int) v) inline {
    var (v'owner, v'parent, v'betAmount, v'outcome) = v;
    build_0 = __tact_store_address(build_0, v'owner);
    build_0 = __tact_store_address(build_0, v'parent);
    build_0 = build_0.store_uint(v'betAmount, 64);
    build_0 = build_0.store_int(v'outcome, 8);
    return build_0;
}

(slice, ((slice, slice, int, int))) $UserBet$_load(slice sc_0) inline {
    var v'owner = sc_0~__tact_load_address();
    var v'parent = sc_0~__tact_load_address();
    var v'betAmount = sc_0~load_uint(64);
    var v'outcome = sc_0~load_int(8);
    return (sc_0, (v'owner, v'parent, v'betAmount, v'outcome));
}

(slice, ((slice, slice))) $UserBet$init$_load(slice sc_0) inline {
    var v'owner = sc_0~__tact_load_address();
    var v'parent = sc_0~__tact_load_address();
    return (sc_0, (v'owner, v'parent));
}

(slice, slice, int, int) $UserBet$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$UserBet$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        (slice owner, slice parent) = $sc~$UserBet$init$_load();
        $sc.end_parse();
        return $UserBet$_contract_init(owner, parent);
    }
}

() $UserBet$_contract_store((slice, slice, int, int) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $UserBet$_store(b, v);
    set_data(b.end_cell());
}