;;
;; Header files for MarketFactory
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) inline;

;; __tact_load_address
(slice, slice) __tact_load_address(slice cs) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_create_address
slice __tact_create_address(int chain, int hash) inline;

;; __tact_compute_contract_address
slice __tact_compute_contract_address(int chain, cell code, cell data) inline;

;; __tact_my_balance
int __tact_my_balance() inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; __tact_slice_eq_bits
int __tact_slice_eq_bits(slice a, slice b) inline;

;; __tact_slice_neq
int __tact_slice_neq(slice a, slice b) inline;

;; __tact_dict_set_code
cell __tact_dict_set_code(cell dict, int id, cell code) inline;

;; __tact_dict_get_code
cell __tact_dict_get_code(cell dict, int id) inline;

;; $Deploy$_load
(slice, ((int))) $Deploy$_load(slice sc_0) inline;

;; $DeployOk$_store
builder $DeployOk$_store(builder build_0, (int) v) inline;

;; $DeployOk$_store_cell
cell $DeployOk$_store_cell((int) v) inline;

;; $ChangeOwner$_load
(slice, ((int, slice))) $ChangeOwner$_load(slice sc_0) inline;

;; $ChangeOwnerOk$_store
builder $ChangeOwnerOk$_store(builder build_0, (int, slice) v) inline;

;; $ChangeOwnerOk$_store_cell
cell $ChangeOwnerOk$_store_cell((int, slice) v) inline;

;; $CreateMarket$_load
(slice, ((slice, int, slice, slice, int))) $CreateMarket$_load(slice sc_0) inline;

;; $MarketInitialize$_store
builder $MarketInitialize$_store(builder build_0, (slice, slice, int, slice, slice, int) v) inline_ref;

;; $MarketInitialize$_store_cell
cell $MarketInitialize$_store_cell((slice, slice, int, slice, slice, int) v) inline;

;; $MarketFactory$_store
builder $MarketFactory$_store(builder build_0, (slice, int) v) inline;

;; $MarketFactory$_load
(slice, ((slice, int))) $MarketFactory$_load(slice sc_0) inline;

;; $StateInit$_not_null
((cell, cell)) $StateInit$_not_null(tuple v) inline;

;; $PredictionMarket$init$_store
builder $PredictionMarket$init$_store(builder build_0, (slice, int) v) inline;

;; $MarketFactory$_contract_init
(slice, int) $MarketFactory$_contract_init() impure inline_ref;

;; $MarketFactory$_contract_load
(slice, int) $MarketFactory$_contract_load() impure inline_ref;

;; $MarketFactory$_contract_store
() $MarketFactory$_contract_store((slice, int) v) impure inline;

;; $global_contractAddress
slice $global_contractAddress((cell, cell) $s) impure inline;

;; $global_send
() $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;

;; $PredictionMarket$_init_child
(cell, cell) $PredictionMarket$_init_child(cell sys', slice $parent, int $seqno) inline_ref;

;; $SendParameters$_constructor_to_value_mode_code_data_body
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_code_data_body(slice to, int value, int mode, cell code, cell data, cell body) inline;

;; $SendParameters$_constructor_bounce_to_value_mode_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline;

;; $MarketFactory$_fun_childAddress
((slice, int), slice) $MarketFactory$_fun_childAddress((slice, int) $self, int $seqno) impure inline_ref;

;; $MarketFactory$_fun_predictionMarketCount
((slice, int), int) $MarketFactory$_fun_predictionMarketCount((slice, int) $self) impure inline_ref;

;; $MarketFactory$_fun_forward
((slice, int), ()) $MarketFactory$_fun_forward((slice, int) $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref;

;; $MarketFactory$_fun_reply
((slice, int), ()) $MarketFactory$_fun_reply((slice, int) $self, cell $body) impure inline;

;; $MarketFactory$_fun_notify
((slice, int), ()) $MarketFactory$_fun_notify((slice, int) $self, cell $body) impure inline;

;; $MarketFactory$_fun_requireOwner
((slice, int), ()) $MarketFactory$_fun_requireOwner((slice, int) $self) impure inline_ref;

;; $MarketFactory$_fun_owner
((slice, int), slice) $MarketFactory$_fun_owner((slice, int) $self) impure inline_ref;

;; $MarketInitialize$_constructor_owner_eventDescription_endTime_outcomeName1_outcomeName2_numOutcomes
((slice, slice, int, slice, slice, int)) $MarketInitialize$_constructor_owner_eventDescription_endTime_outcomeName1_outcomeName2_numOutcomes(slice owner, slice eventDescription, int endTime, slice outcomeName1, slice outcomeName2, int numOutcomes) inline;

;; $DeployOk$_constructor_queryId
((int)) $DeployOk$_constructor_queryId(int queryId) inline;

;; $ChangeOwnerOk$_constructor_queryId_newOwner
((int, slice)) $ChangeOwnerOk$_constructor_queryId_newOwner(int queryId, slice newOwner) inline;
